{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","queryUrl","useRef","textareaRef","fileNameRef","dataAppState","url","filename","a","fetch","response","json","result","current","value","JSON","stringify","className","type","ref","onChange","e","target","console","log","placeholder","id","onClick","rows","content","Blob","FileSaver","saveAs","textarea","clear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAoEeA,MAjEf,WACE,IAAMC,EAAWC,mBACXC,EAAcD,mBACdE,EAAcF,mBAEhBG,EAAe,CACjBC,IAAK,GACLC,SAAU,GACVJ,YAAa,IARF,4CA0Bb,8BAAAK,EAAA,sEACyBC,MAAMJ,EAAaC,KAD5C,cACQI,EADR,gBAEuBA,EAASC,OAFhC,OAEQC,EAFR,OAGEP,EAAaF,YAAcS,EAC3BT,EAAYU,QAAQC,MAAQC,KAAKC,UAAUJ,GAJ7C,4CA1Ba,sBAgDb,OACE,yBAAKK,UAAU,mBACb,yBAAKA,UAAU,eAAc,2BAAOC,KAAK,OAAOC,IAAKlB,EAAUmB,SA7BnE,SAAmBC,GACjBhB,EAAaC,IAAMe,EAAEC,OAAOR,MAC5BS,QAAQC,IAAInB,EAAaC,MA2B6DW,UAAU,eAAeQ,YAAY,4BACvH,4BAAQR,UAAU,uBAAuBS,GAAG,SAASC,QAnD9C,4CAmDP,WAGF,8BAAUR,IAAKhB,EAAaiB,SArBhC,SAAwBC,GACtBhB,EAAaF,YAAckB,EAAEC,OAAOR,MACpCS,QAAQC,IAAInB,EAAaF,cAmB+Bc,UAAU,oBAAoBS,GAAG,8BAA8BE,KAAK,KAAKH,YAAY,yCAE3I,2BAAOP,KAAK,OAAOC,IAAKf,EAAaa,UAAU,oBAAoBG,SAlBvE,SAAwBC,GACtB,IAAMd,EAAWc,EAAEC,OAAOR,MAC1BT,EAAaE,SAAWA,GAgBuEkB,YAAY,qBAEzG,4BAAQR,UAAU,uBAAuBU,QAf7C,SAAkBN,GAChB,IAAIQ,EAAU,IAAIC,KAAK,CAACf,KAAKC,UAAUX,EAAaF,cAAe,CAAEe,KAAM,mCAC3Ea,IAAUC,OAAOH,EAASxB,EAAaE,YAarC,oBACA,4BAAQoB,QAhDZ,WACEtB,EAAaC,IAAM,GACnBL,EAASY,QAAQC,MAAQ,GACzBT,EAAaE,SAAW,GACxBJ,EAAYU,QAAQC,MAAQ,GAC5BT,EAAa4B,SAAW,GACxB7B,EAAYS,QAAQC,MAAQ,GAC5BS,QAAQW,SAyCyBjB,UAAU,kBAAzC,sBClDckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9ab4127d.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport FileSaver from 'file-saver';\r\n\r\nfunction App() {\r\n  const queryUrl = useRef();\r\n  const textareaRef = useRef();\r\n  const fileNameRef = useRef();\r\n\r\n  let dataAppState = {\r\n    url: \"\",\r\n    filename: '',\r\n    textareaRef: ''\r\n  }\r\n\r\n  function clearAppData() {// WORKS GOOD!\r\n    dataAppState.url = '';\r\n    queryUrl.current.value = ''\r\n    dataAppState.filename = '';\r\n    textareaRef.current.value = ''\r\n    dataAppState.textarea = '';\r\n    fileNameRef.current.value = '';\r\n    console.clear();\r\n  }\r\n\r\n  function changeUrl(e) {// WORKS GOOD!\r\n    dataAppState.url = e.target.value;\r\n    console.log(dataAppState.url);\r\n  }\r\n\r\n  async function getRepos() {// WORKS GOOD!\r\n    const response = await fetch(dataAppState.url);\r\n    const result = await response.json();\r\n    dataAppState.textareaRef = result;\r\n    textareaRef.current.value = JSON.stringify(result);\r\n  }\r\n\r\n  function updateTextArea(e) {// WORKS \r\n    dataAppState.textareaRef = e.target.value;\r\n    console.log(dataAppState.textareaRef);\r\n  }\r\n\r\n  function changeFilename(e) {//WORKS GOOD!\r\n    const filename = e.target.value;\r\n    dataAppState.filename = filename;\r\n  }\r\n\r\n  function saveJson(e) {//WORKS GOOD!\r\n    var content = new Blob([JSON.stringify(dataAppState.textareaRef)], { type: \"application/json;charset=utf-8\" });\r\n    FileSaver.saveAs(content, dataAppState.filename);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App text-center\">\r\n      <div className=\"d-flex my-2\"><input type=\"text\" ref={queryUrl} onChange={changeUrl} className=\"form-control\" placeholder=\"Enter Github Query Link\" />\r\n        <button className=\"btn btn-primary ml-2\" id=\"search\" onClick={getRepos}>Search</button>\r\n      </div>\r\n\r\n      <textarea ref={textareaRef} onChange={updateTextArea} className=\"my-2 form-control\" id=\"exampleFormControlTextarea1\" rows=\"20\" placeholder=\"Enter some text or Fetch Github Data\"></textarea>\r\n\r\n      <input type=\"text\" ref={fileNameRef} className=\"my-2 form-control\" onChange={changeFilename} placeholder=\"Insert file name\"></input>\r\n\r\n      <button className=\"btn btn-success mr-2\" onClick={saveJson}>Export JSON File</button>\r\n      <button onClick={clearAppData} className=\"btn btn-danger\">Reset All Fields</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css'; //importing bootstrap for styling\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}